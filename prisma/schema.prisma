// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String  @id @default(uuid())
  name             String
  middle_name      String?
  father_last_name String
  mother_last_name String
  phone            String  @unique
  email            String  @unique
  password         String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  teams UsersOnTeams[]
}

model Team {
  id String @id @default(uuid())

  name     String
  logo     String
  joinCode String? @unique

  addressId String
  address   Address @relation(fields: [addressId], references: [id])

  users          UsersOnTeams[]
  Client         Client[]
  TeamInvitation TeamInvitation[]
  Subscription   Subscription?
  Vehicle        Vehicle[]
  Driver         Driver[]
}

model UsersOnTeams {
  User      User     @relation(fields: [userId], references: [id])
  userId    String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  rol       Role     @default(USER)
  createdAt DateTime @default(now())

  @@id([userId, teamId])
}

model Address {
  id              String   @id @default(uuid())
  street          String
  exterior_number String
  interior_number String?
  neighborhood    String
  city            String
  state           String
  country         String
  postal_code     String
  created_at      DateTime @default(now())

  teams  Team[]
  Client Client[]
  Driver Driver[]
}

model Client {
  id String @id @default(uuid())

  name        String
  description String?
  rfc         String
  email       String
  phone       String
  cfdiUse     String
  taxRegime   String
  zipCode     String
  status      ClientStatus @default(ACTIVE)

  addressId String
  address   Address @relation(fields: [addressId], references: [id])

  teamId String
  team   Team   @relation(fields: [teamId], references: [id])

  contacts Contact[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model TeamInvitation {
  id        String   @id @default(uuid())
  email     String
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id])
  createdAt DateTime @default(now())

  @@unique([email, teamId])
}

model Contact {
  id        String      @id @default(uuid())
  driverId  String?
  clientId  String?
  driver    Driver?     @relation(fields: [driverId], references: [id])
  client    Client?     @relation(fields: [clientId], references: [id])
  type      ContactType
  value     String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Subscription {
  id        String             @id @default(uuid())
  teamId    String             @unique
  team      Team               @relation(fields: [teamId], references: [id])
  status    SubscriptionStatus @default(ACTIVE)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  startsAt  DateTime
  expiresAt DateTime
}

model Driver {
  id            String       @id @default(uuid())
  teamId        String
  team          Team         @relation(fields: [teamId], references: [id])
  name          String
  status        DriverStatus @default(DISPONIBLE)
  photoUrl      String
  licenseNumber String
  addressId     String
  address       Address      @relation(fields: [addressId], references: [id])
  contacts      Contact[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Vehicle {
  id        String        @id @default(uuid())
  teamId    String
  team      Team          @relation(fields: [teamId], references: [id])
  plate     String        @unique
  brand     String
  year      String
  vin       String?
  model     String
  type      String
  status    VehicleStatus @default(DISPONIBLE)
  imageUrl  String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum VehicleStatus {
  DISPONIBLE
  EN_USO
  MANTENIMIENTO
  CANCELADO
  DESUSO
}

enum DriverStatus {
  DISPONIBLE
  EN_VIAJE
  DESACTIVADO
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRING_SOON
  EXPIRED
  CANCELLED
}

enum Role {
  USER
  ADMIN
  OWNER
}

enum ClientStatus {
  ACTIVE
  DELETED
  CANCELLED
}

enum ContactType {
  EMAIL
  PHONE
  FAX
  OTHER
}
